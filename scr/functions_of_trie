class TrieNode:
    def __init__(self):
        self.children = [None] * 26
        self.leaf = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert_word(self, word = str):
        current_node = self.root
        for letter in word:
            position = ord(letter) - ord('a')
            if not current_node.children[position]:
                current_node.children[position] = TrieNode()
            current_node = current_node.children[position]
        current_node.leaf = True

    def search_word(self, word: str):
        current_node = self.root
        for letter in word:
            position = ord(letter) - ord('a')
            if not current_node.children[position]:
                return False
            current_node = current_node.children[position]
        return current_node.leaf and current_node

    def search_trie(self, prefix: str):
        current_node = self.root
        for letter in prefix:
            position = ord(letter) - ord('a')
            if not current_node.children[position]:
                return False
            current_node = current_node.children[position]
        return True
